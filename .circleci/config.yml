version: 2.1

# OVERVIEW - What this CI pipeline does:
#
# 1. This pipeline consists of one workflow, which
#    - clones ehrbase repo
#    - builds ehrbase server from develop branch
#    - starts ehrbase server (postgresql db is included in used docker executor,
#                             see executors section at the buttom)
#    - builds FHIR-bridge code
#    - runs (Java) integration tests
#    - creates code coverage report w/ Jacoco
#    - performes sonarcloud.io code analysis
#    - creates a tag and pushes that to Git
#    - Builds the Docker image and pushes that do DockerHub with appropriate tag
#    - Deploys Robot Test Documentation to Github-Pages


workflows:
  version: 2

  # WORKFLOW 1/2 Build & Quickly Test FHIR-bridge code
  QUALITY-GATE-I:
    jobs:
      - quick-test-fhirbridge:
          context: org-global
          filters:
            branches:
              ignore: gh-pages
              # - master
              # - develop
              # - release

  # WORKFLOW 2/2 Build, Fully Test & Analyze FHIR-bridge code
  QUALITY-GATE-II:
    jobs:
      - build-test-analyse-fhirbridge:
          context: org-global
          filters:
            branches:
              ignore: gh-pages

      # Execute Robot Integration Tests (Parallel Execution)
      - BUNDLE-tests:
          context: org-global
          requires:
            - build-test-analyse-fhirbridge
          filters:
            branches:
              ignore: gh-pages

      - CONDITION-tests:
          context: org-global
          requires:
            - build-test-analyse-fhirbridge
          filters:
            branches:
              ignore: gh-pages

      - CONSENT-tests:
          context: org-global
          requires:
            - build-test-analyse-fhirbridge
          filters:
            branches:
              ignore: gh-pages

      - DIAGNOSTIC-tests:
          context: org-global
          requires:
            - build-test-analyse-fhirbridge
          filters:
            branches:
              ignore: gh-pages

      - IMMUNIZATION-tests:
          context: org-global
          requires:
            - build-test-analyse-fhirbridge
          filters:
            branches:
              ignore: gh-pages

      - MEDICATIONSTATEMENT-tests:
          context: org-global
          requires:
            - build-test-analyse-fhirbridge
          filters:
            branches:
              ignore: gh-pages

      - OBSERVATION-tests:
          context: org-global
          requires:
            - build-test-analyse-fhirbridge
          filters:
            branches:
              ignore: gh-pages

      - PROCEDURE-tests:
          context: org-global
          requires:
            - build-test-analyse-fhirbridge
          filters:
            branches:
              ignore: gh-pages

      - QUESTIONAIRE-tests:
          context: org-global
          requires:
            - build-test-analyse-fhirbridge
          filters:
            branches:
              ignore: gh-pages

      - ROBOT-TEST-REPORT:
          context: org-global
          requires:
            - BUNDLE-tests
            - CONDITION-tests
            - CONSENT-tests
            - DIAGNOSTIC-tests
            - IMMUNIZATION-tests
            - MEDICATIONSTATEMENT-tests
            - OBSERVATION-tests
            - PROCEDURE-tests
            - QUESTIONAIRE-tests


      - tag-version:
          context: org-global
          requires:
            - build-test-analyse-fhirbridge
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|hotfix\/v\d+\.\d+\.\d+)$/


      - build-and-deploy:
          context: org-global
          requires:
            - build-test-analyse-fhirbridge
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|hotfix\/v\d+\.\d+\.\d+|master|develop)$/

#
#
#            - deploy-testdocs-githup-pages:
#                context: org-global
#                requires:
#                    - ROBOT-TEST-REPORT
#                filters:
#                    branches:
#                        only:
#                            - develop







jobs:
  #           88    ,ad8888ba,    88888888ba    ad88888ba
  #           88   d8"'    `"8b   88      "8b  d8"     "8b
  #           88  d8'        `8b  88      ,8P  Y8,
  #           88  88          88  88aaaaaa8P'  `Y8aaaaa,
  #           88  88          88  88""""""8b,    `"""""8b,
  #           88  Y8,        ,8P  88      `8b          `8b
  #   88,   ,d88   Y8a.    .a8P   88      a8P  Y8a     a8P
  #    "Y8888P"     `"Y8888Y"'    88888888P"    "Y88888P"


  quick-test-fhirbridge:
    description: Build and test FHIR-bridge
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - install-maven
      #            - git-clone-ehrbase-repo
      - cache-out-fhirbridge-m2-dependencies
      #            - cache-out-ehrbase-m2-dependencies
      #            - build-ehrbase
      #      - start-ehrbase-server
      - build-and-test-fhirbridge:
          skip-tests: false    # TODO: set to true if/when FHIRbrige gets some unit tests (at the moment *IT.java tests is all we have)
      #            - cache-in-ehrbase-m2-dependencies
      - cache-in-fhirbridge-m2-dependencies
      # - collect-fhirbridge-unittest-results
      - collect-fhirbridge-integrationtest-results
      - save-fhirbridge-test-results


  build-test-analyse-fhirbridge:
    description: |
      Build and test FHIR-bridge, analyze code, collect code coverage metrics,
      upload results to sonarcloud.io
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - install-maven
      #      - git-clone-ehrbase-repo
      - cache-out-fhirbridge-m2-dependencies
      #      - cache-out-ehrbase-m2-dependencies
      #      - build-ehrbase
      #      - start-ehrbase-server
      - build-and-test-fhirbridge:
          skip-javadoc: true
          skip-jacoco: false
          skip-tests: false
      #      - cache-in-ehrbase-m2-dependencies
      - cache-in-fhirbridge-m2-dependencies
      # - start-fhirbridge-application
      # - run-robot-integration-tests
      # - save-fhirbridge-robot-test-results
      # - collect-fhirbridge-unittest-results
      - collect-fhirbridge-integrationtest-results
      - save-fhirbridge-test-results
      - save-jacoco-coverage-report
      - save-fhirbridge-workspace
      - sonarcloud/scan:
          cache_version: 2


  BUNDLE-tests:
    description: |
      todo
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - install-maven
      - restore-fhirbridge-workspace
      - start-ehrbase-server
      - start-fhirbridge-application
      - run-robot-integration-tests:
          include-tags: "bundle"
          test-suite-path: "BUNDLE"
          test-suite-name: "BUNDLE"
          runner: robot
          # pabot-split: "--testlevelsplit"
          pabot-split: ""
      - save-fhirbridge-robot-test-results

  CONDITION-tests:
    description: |
      todo
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - install-maven
      - restore-fhirbridge-workspace
      - start-ehrbase-server
      - start-fhirbridge-application
      - run-robot-integration-tests:
          include-tags: "condition"
          test-suite-path: "CONDITION"
          test-suite-name: "CONDITION"
          runner: robot
          pabot-split: ""
      - save-fhirbridge-robot-test-results

  CONSENT-tests:
    description: |
      todo
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - install-maven
      - restore-fhirbridge-workspace
      - start-ehrbase-server
      - start-fhirbridge-application
      - run-robot-integration-tests:
          include-tags: "consent"
          test-suite-path: "CONSENT"
          test-suite-name: "CONSENT"
          runner: robot
          pabot-split: ""
      - save-fhirbridge-robot-test-results

  DOCUMENTREFERENCE-tests:
    description: |
      todo
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - install-maven
      - restore-fhirbridge-workspace
      - start-ehrbase-server
      - start-fhirbridge-application
      - run-robot-integration-tests:
          include-tags: "document-reference"
          test-suite-path: "DOCUMENTREFERENCE"
          test-suite-name: "DOCUMENTREFERENCE"
          runner: robot
          pabot-split: ""
      - save-fhirbridge-robot-test-results

  DIAGNOSTIC-tests:
    description: |
      todo
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - install-maven
      - restore-fhirbridge-workspace
      - start-ehrbase-server
      - start-fhirbridge-application
      - run-robot-integration-tests:
          include-tags: "diagnostic-report"
          test-suite-path: "DIAGNOSTIC"
          test-suite-name: "DIAGNOSTIC"
          runner: robot
          pabot-split: ""
      - save-fhirbridge-robot-test-results

  IMMUNIZATION-tests:
    description: |
      todo
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - install-maven
      - restore-fhirbridge-workspace
      - start-ehrbase-server
      - start-fhirbridge-application
      - run-robot-integration-tests:
          include-tags: "immunization"
          test-suite-path: "IMMUNIZATION"
          test-suite-name: "IMMUNIZATION"
          runner: robot
          pabot-split: ""
      - save-fhirbridge-robot-test-results

  MEDICATIONSTATEMENT-tests:
    description: |
      todo
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - install-maven
      - restore-fhirbridge-workspace
      - start-ehrbase-server
      - start-fhirbridge-application
      - run-robot-integration-tests:
          include-tags: "medicationstatement"
          test-suite-path: "MEDICATIONSTATEMENT"
          test-suite-name: "MEDICATIONSTATEMENT"
          runner: robot
          pabot-split: ""
      - save-fhirbridge-robot-test-results

  OBSERVATION-tests:
    description: |
      todo
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - install-maven
      - restore-fhirbridge-workspace
      - start-ehrbase-server
      - start-fhirbridge-application
      - run-robot-integration-tests:
          include-tags: "observation"
          test-suite-path: "OBSERVATION"
          test-suite-name: "OBSERVATION"
          runner: robot
          pabot-split: ""
      - save-fhirbridge-robot-test-results

  PROCEDURE-tests:
    description: |
      todo
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - install-maven
      - restore-fhirbridge-workspace
      - start-ehrbase-server
      - start-fhirbridge-application
      - run-robot-integration-tests:
          include-tags: "procedure"
          test-suite-path: "PROCEDURE"
          test-suite-name: "PROCEDURE"
          runner: robot
          pabot-split: ""
      - save-fhirbridge-robot-test-results

  QUESTIONAIRE-tests:
    description: |
      todo
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - install-maven
      - restore-fhirbridge-workspace
      - start-ehrbase-server
      - start-fhirbridge-application
      - run-robot-integration-tests:
          include-tags: "questionnaire"
          test-suite-path: "QUESTIONNAIRE"
          test-suite-name: "QUESTIONNAIRE"
          runner: robot
          pabot-split: ""
      - save-fhirbridge-robot-test-results

  ROBOT-TEST-REPORT:
    description: |
      todo
    executor: docker-python3-java11
    steps:
      - checkout
      - restore-fhirbridge-workspace
      - merge-robot-outputs



  tag-version:
    docker:
      - image: circleci/openjdk:stretch
    steps:
      - checkout
      - configure-git-for-ci-bot
      - run:
          name: Update Snapshot Version
          description: |
            This automatically sets the application version when there is a commit to release or hotfix branch.
            The version number is parsed from the branch name, for example release/v1.0.5 will create a tag v1.0.5
            and set the version number in pom.xml to same version.
          command: |
            VERSION_NUMBER="$(echo $CIRCLE_BRANCH | awk -F'/v' '{print $2;}')"
            echo "Updating the application version from the branch to ${VERSION_NUMBER}"
            ./mvnw versions:set -DnewVersion=$VERSION_NUMBER versions:commit
            
            git commit -am "updated version to ${VERSION_NUMBER} [skip ci]"
            git tag -a v$VERSION_NUMBER -m "fhir-bridge release version v${VERSION_NUMBER}"
            git push --set-upstream origin $CIRCLE_BRANCH
            git push origin --tags
            
            exit 0
  

  build-and-deploy:
    docker:
      - image: cimg/openjdk:11.0.8
        auth:
          username: $DOCKER_USER
          password: $DOCKER_HUB_PASSWORD
    steps:
      - checkout
      - install-maven
      - configure-git-for-ci-bot
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build and tag image and push
          command: |
            if [ $CIRCLE_BRANCH = "master" ]; then
                TAG=$(./mvnw -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
            elif [ $CIRCLE_BRANCH = "develop" ]; then
                TAG="next"
            else
                TAG="$(echo $CIRCLE_BRANCH | awk -F'/' '{print $2;}')-rc"
            fi
            echo "Publishing Docker image with following tag: ${TAG}"
            echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
            #   ./mvnw clean install -DskipTests -Djdk.tls.client.protocols=TLSv1.2
            #   docker build -t ehrbase/fhir-bridge:$TAG .
            mvn spring-boot:build-image -Dspring-boot.build-image.imageName=ehrbase/fhir-bridge:$TAG -Dmaven.test.skip
            docker tag ehrbase/fhir-bridge ehrbase/fhir-bridge:$TAG
            docker push ehrbase/fhir-bridge:$TAG


#    deploy-testdocs-githup-pages:
#        description: |
#            Deploy Robot Test Documentation to Github Pages
#
#            How This Works
#            ==============
#
#            1. All files required for the Github Pages are generated in the job 'ROBOT-TEST-REPORT'.
#            2. The command 'merge-robot-outputs' persists copies of these files to workspace (prefixing them with 'new_').
#            3. In this job the files (new_testdocu.html, new_log.html, new_report.html) are attached back
#               to workspace.
#            4. After checking out gh-pages branch the new_ files are copied over the old files
#            5. Changes are commited and force-pushed back to origin
#            6. Updated testdocs are served via Github Pages @https://ehrbase.github.io/fhir-bridge/
#
#        executor: docker-py3-java11-postgres
#        steps:
#            - checkout
#            - configure-git-for-ci-bot
#            - restore-fhirbridge-workspace
#            - run:
#                name: OVERWRITE OLD ROBOT FILES AND PUSH UPDATE TO GH-PAGES BRANCH
#                command: |
#                    # ls -la
#                    git checkout gh-pages
#                    # git status
#                    cp new_fhir-bridge-robot-testdocu.html fhir-bridge-robot-testdocu.html
#                    cp new_log.html log.html
#                    cp new_report.html report.html
#                    # ls -la
#                    # git status
#                    git commit -am "Updates Robot Test Documentation Github Page --> https://ehrbase.github.io/fhir-bridge/"
#                    git push --force --set-upstream origin gh-pages







commands:
  #     ,ad8888ba,    ,ad8888ba,    88b           d88  88b           d88         db         888b      88  88888888ba,     ad88888ba
  #    d8"'    `"8b  d8"'    `"8b   888b         d888  888b         d888        d88b        8888b     88  88      `"8b   d8"     "8b
  #   d8'           d8'        `8b  88`8b       d8'88  88`8b       d8'88       d8'`8b       88 `8b    88  88        `8b  Y8,
  #   88            88          88  88 `8b     d8' 88  88 `8b     d8' 88      d8'  `8b      88  `8b   88  88         88  `Y8aaaaa,
  #   88            88          88  88  `8b   d8'  88  88  `8b   d8'  88     d8YaaaaY8b     88   `8b  88  88         88    `"""""8b,
  #   Y8,           Y8,        ,8P  88   `8b d8'   88  88   `8b d8'   88    d8""""""""8b    88    `8b 88  88         8P          `8b
  #    Y8a.    .a8P  Y8a.    .a8P   88    `888'    88  88    `888'    88   d8'        `8b   88     `8888  88      .a8P   Y8a     a8P
  #     `"Y8888Y"'    `"Y8888Y"'    88     `8'     88  88     `8'     88  d8'          `8b  88      `888  88888888Y"'     "Y88888P"


  #  git-clone-ehrbase-repo:
  #    steps:
  #      - run:
  #          name: CLONE EHRBASE REPO
  #          command: |
  #            git clone git@github.com:ehrbase/ehrbase.git
  #            ls -la
  #
  #
  #  build-ehrbase:
  #    steps:
  #      - run:
  #          name: BUILD EHRBASE SERVER
  #          command: |
  #            ls -la
  #            cd ehrbase
  #            mvn package -Dmaven.javadoc.skip=true -Djacoco.skip=true -Dmaven.test.skip
  

  start-ehrbase-server:
    steps:
      - run:
          name: START EHRBASE SERVER
          background: true
          command: |
            ls -la
            cd ehrbase
            EHRbase_VERSION=$(mvn -q -Dexec.executable="echo" \
                                     -Dexec.args='${project.version}' \
                                     --non-recursive exec:exec)
            echo ${EHRbase_VERSION}
            java -jar "application/target/application-${EHRbase_VERSION}.jar" --server.disable-strict-validation=true \
                                                                              --security.authType="BASIC" \
                                                                              --security.authUser="myuser" \
                                                                              --security.authPassword="myPassword432" > log
  

  build-and-test-fhirbridge:
    description: |
      Executes `mvn clean verify`
    parameters:
      skip-jacoco:
        description: Skip Jacoco's Code Instrumentation For Coverage Analysis
        type: boolean
        default: true
      skip-tests:
        description: Do Not Compile And Do Not Run Test Code
        type: boolean
        default: true
      skip-javadoc:
        description: Skip Java Docs Generation
        type: boolean
        default: true
    steps:
#      - run:
      #          name: WAIT FOR EHRBASE SERVER TO BE READY
      #          command: |
      #            ls -la
      #            timeout=600
      #            while [ ! -f ehrbase/log ];
      #                do
      #                    echo "Waiting for file ehrbase/log ..."
      #                    if [ "$timeout" == 0 ]; then
      #                        echo "ERROR: timed out while waiting for file ehrbase/log"
      #                        exit 1
      #                    fi
      #                    sleep 1
      #                ((timeout--))
      #            done
      #            echo "REMAINING TIMEOUT: $timeout"
      #            while ! (cat ehrbase/log | grep -m 1 "Started EhrBase in");
      #                do
      #                    echo "waiting for EHRbase to be ready ...";
      #                    if [ "$timeout" == 0 ]; then
      #                        echo "WARNING: Did not see a startup message even after waiting 600s"
      #                        cat ehrbase/log
      #                        exit 1
      #                    fi
      #                    sleep 1;
      #                ((timeout--))
      #            done
      #            echo "REMAINING TIMEOUT: $timeout"
      #            jps
      - run:
          name: BUILD FHIR-BRIDGE
          command: |
            ls -la
            mvn clean verify -Dmaven.javadoc.skip=<< parameters.skip-javadoc >> \
                             -DskipITs=<< parameters.skip-tests >> \
                             -Djacoco.skip=<< parameters.skip-jacoco >>
  

  start-fhirbridge-application:
    steps:
      - run:
          name: START FHIRBRIDGE APPLICATION
          background: true
          command: |
            ls -la
            FHIRBRIDGE_VERSION=$(mvn -q -Dexec.executable="echo" \
                                     -Dexec.args='${project.version}' \
                                     --non-recursive exec:exec)
            echo "FHIRBRIDGE_VERSION: ${FHIRBRIDGE_VERSION}"
            java -jar "target/fhir-bridge-${FHIRBRIDGE_VERSION}.jar" --fhir-bridge.fhir.endpoints.DocumentReference=true \
                                                                     --fhir-bridge.minio.url=http://localhost:9000 \
                                                                     --fhir-bridge.minio.access-key=minio \
                                                                     --fhir-bridge.minio.secret-key=minio123456 \
                                                                     --fhir-bridge.minio.bucket-name=fhir-bridge-bucket > fhirbride_log

      - run:
          name: WAIT FOR FHIRBRIDE TO BE READY
          command: |
            ls -la
            timeout=600
            while [ ! -f fhirbride_log ];
                do
                    echo "Waiting for file fhirbride_log ..."
                    if [ "$timeout" == 0 ]; then
                        echo "ERROR: timed out while waiting for file fhirbride_log"
                        exit 1
                    fi
                    sleep 1
                ((timeout--))
            done
            while ! (cat fhirbride_log | grep -m 1 "Started FhirBridgeApplication in");
                do
                    echo "waiting for FHIR-Bridge to be ready ...";
                    if [ "$timeout" == 0 ]; then
                        echo "WARNING: Did not see a startup message even after waiting 600s"
                        cat fhirbride_log
                        exit 1
                    fi
                    sleep 1;
                ((timeout--))
            done
            echo "REMAINING TIMEOUT: $timeout"
            jps
      - run:
          name: Save fhirbridge starup log
          command: |
            mkdir -p /tmp/logs
            cp fhirbride_log /tmp/logs/fhirbridge_startup_log
            cat /tmp/logs/fhirbridge_startup_log
          when: always
      - store_artifacts:
          path: /tmp/logs/fhirbridge_startup_log


  run-robot-integration-tests:
    parameters:
      runner:
        description: Run tests with `robot` OR `pabot` command
        type: string
        default: robot
      pabot-split:
        description: Only when `pabot` command is used add `--testlevelsplit` option
        type: string
        default: ""
      include-tags:
        description: Which tests to inclue by TAGs (Robot syntax applies!)
        type: string

      test-suite-path:
        description: Target test-suite given by it's folder name e.g. COMPOSITION_TESTS
        default: ""
        type: string

      test-suite-name:
        description: Titel of generated Robot Log/Report.html
        type: string
    steps:
      - install-robot-dependencies
      - run:
          name: RUN ROBOT TESTS
          command: |
            . venv/bin/activate
            cd tests/
            << parameters.runner >> <<parameters.pabot-split >> -v OUTPUT_LEVEL:verbose -L TRACE \
                  --include << parameters.include-tags >> \
                  --outputdir results/0/<< parameters.test-suite-name >> \
                  --name << parameters.test-suite-name >> \
                  --skip TODO --skip future \
                  --skiponfailure not-ready \
                  robot/<< parameters.test-suite-path >>
      - run:
          name: GENERATE XUNIT REPORT FOR CIRCLECI UI INTEGRATION (per test suite)
          when: always
          command: |
            . venv/bin/activate
            cd tests/
            rebot --outputdir results/1/robot-tests \
                -e obsolete -e libtest \
                --removekeywords for \
                --removekeywords wuks \
                --loglevel INFO \
                --output NONE \
                --log NONE \
                --report NONE \
                --xunit junit-output-<< parameters.test-suite-name >>.xml \
                results/0/<< parameters.test-suite-name >>/output.xml
      - run:
          name: COPY ROBOT OUTPUT FILES
          when: always
          command: |
            mkdir 00_robot_results
            cp -r tests/results/0/* 00_robot_results/
            cp fhirbride_log 00_robot_results/fhirbride_test_log_<< parameters.test-suite-name >>
  

  merge-robot-outputs:
    description: Merge Robot Results from Parallel Tests
    steps:
      - install-robot-dependencies
      - run:
          name: POST PROCESS & MERGE TEST RESULTS
          when: always
          command: |
            . venv/bin/activate
            cd tests/
            # Create Log/Report with ALL DETAILS
            rebot --outputdir results/0 \
                --name FHIR-bridge \
                -e obsolete -e libtest \
                --removekeywords for \
                --removekeywords wuks \
                --loglevel TRACE \
                --output FHIR-bridge-output.xml \
                --log FHIR-bridge-log.html \
                --report FHIR-bridge-report.html \
                results/0/*/*.xml
      - run:
          name: GENERATE XUNIT REPORT FOR CIRCLECI UI INTEGRATION (for all tests)
          when: always
          command: |
            . venv/bin/activate
            cd tests/
            # Create JUNIT report from merged results
            rebot --outputdir results/2/robot-tests \
                -e obsolete -e libtest \
                --xunit junit-output.xml \
                --log NONE \
                --report NONE \
                results/0/FHIR-bridge-output.xml
      - run:
          name: GENERATE ROBOT TEST DOCUMENTATION (for Github Pages deployment)
          command: |
            . venv/bin/activate
            python3 -m robot.testdoc tests/robot new_fhir-bridge-robot-testdocu.html
            cp tests/results/0/FHIR-bridge-log.html ./new_log.html
            cp tests/results/0/FHIR-bridge-report.html ./new_report.html
      - run:
          name: COPY ROBOT OUTPUT FILES
          when: always
          command: |
            cp tests/results/0/FHIR-bridge-log.html 00_robot_results/
            cp tests/results/0/FHIR-bridge-report.html 00_robot_results/
            # cp tests/results/0/FHIR-bridge-output.xml 00_robot_results/
            cp new_fhir-bridge-robot-testdocu.html 00_robot_results/fhir-bridge-robot-testdocu.html

      - store_test_results:
          path: ~/projects/tests/results/2
      - store_artifacts:
          path: 00_robot_results/
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - projects/new_fhir-bridge-robot-testdocu.html
            - projects/new_log.html
            - projects/new_report.html


  cache-out-fhirbridge-m2-dependencies:
    steps:
      - run:
          name: Generate Cache Checksum for FHIR-bridge Dependencies
          command: find . -name 'pom.xml' | sort | xargs cat > /tmp/fhirbridge_maven_cache_seed
      - restore_cache:
          key: fhirbridge-v1


  cache-in-fhirbridge-m2-dependencies:
    steps:
      - save_cache:
          key: fhirbridge-v1-{{ checksum "/tmp/fhirbridge_maven_cache_seed" }}
          paths:
            - ~/.m2

  #  cache-out-ehrbase-m2-dependencies:
  #    steps:
  #      - run:
  #          name: Generate Cache Checksum for EHRbase Dependencies
  #          command: find ~/projects/ehrbase -name 'pom.xml' | sort | xargs cat > /tmp/ehrbase_maven_cache_seed
  #      - restore_cache:
  #          key: EHRbase-v1-
  #
  #  cache-in-ehrbase-m2-dependencies:
  #    steps:
  #      - save_cache:
  #          key: EHRbase-v1-{{ checksum "/tmp/ehrbase_maven_cache_seed" }}
  #          paths:
  #            - ~/.m2


  # collect-fhirbridge-unittest-results:
  #     steps:
  #       - run:
  #           name: Save unit test results
  #           command: |
  #             mkdir -p ~/test-results/unit-tests/
  #             find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/unit-tests/ \;
  #             find . -type f -regex ".*/target/surefire-reports/.*txt" -exec cp {} ~/test-results/unit-tests/ \;
  #           when: always


  collect-fhirbridge-integrationtest-results:
    steps:
      - run:
          name: Save integration test results
          command: |
            mkdir -p ~/test-results/integration-tests/
            find . -type f -regex ".*/target/failsafe-reports/.*xml" -exec cp {} ~/test-results/integration-tests/ \;
            find . -type f -regex ".*/target/failsafe-reports/.*txt" -exec cp {} ~/test-results/integration-tests/ \;
          when: always


  save-fhirbridge-test-results:
    steps:
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results


  save-fhirbridge-robot-test-results:
    steps:
      - store_test_results:
          path: ~/projects/tests/results/1
      - store_artifacts:
          path: 00_robot_results/
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - projects/00_robot_results/
            - projects/tests/results/0/


  save-jacoco-coverage-report:
    description: |
      Uploads Jacoco coverage report as circleci artifact
    steps:
      - store_artifacts:
          path: target/site/jacoco


  save-fhirbridge-workspace:
    description: |
      Persists files/folders to share them between jobs.
      NOTE: best practise is to persist files or folders very selectively.
            Do not persist root or the whole workspace at ones, otherwise concurrent jobs
            may fail to restore that stuff.
    steps:
      - persist_to_workspace:
          root: /home/circleci
          paths:
            # - .m2
            - projects/new_fhir-bridge-robot-testdocu.html
            - projects/new_log.html
            - projects/new_report.html
            - projects/ehrbase/pom.xml
            - projects/ehrbase/application/target/
            - projects/target/
            # - projects/tests/robot/
            # - projects/tests/requirements.txt


  restore-fhirbridge-workspace:
    description: |
      Restores any file / folder that was previously persisted w/ 'persist_to_workspace'.
    steps:
      - attach_workspace:
          at: /home/circleci/





  # ///////////////////////////////////////////////////////////////////////////
  # /// HELPER COMMANDS                                                    ///
  # ///////////////////////////////////////////////////////////////////////////

  install-maven:
    description: Installs Maven tool (but only if it's not already installed)
    steps:
      - run:
          name: Install Maven tool
          command: |
            sudo killall -9 apt-get || true
            sudo apt -y update
            [ -f /usr/bin/mvn ] && echo "Maven is already installed." || sudo apt install maven -y

  install-robot-dependencies:
    description: Install Python requirements
    steps:
      - restore_cache:
          key: pip-dep-v1-{{ .Branch }}-{{ checksum "tests/requirements.txt" }}
      - run:
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r tests/requirements.txt
      - save_cache:
          key: pip-dep-v1-{{ .Branch }}-{{ checksum "tests/requirements.txt" }}
          paths:
            - "venv"
      # - run:
      #     name: Install Python requirements
      #     command: |
      #         python -c "import site; print(site.getsitepackages())"
      #         pip install -r tests/requirements.txt

  configure-git-for-ci-bot:
    steps:
      - add_ssh_keys:
          fingerprints:
            - 09:77:7b:61:25:16:a0:19:a7:c4:ba:62:11:0b:9a:29
      - run:
          name: Configure GIT
          command: |
            git config --global user.email "50235421+ehrbase-tech-user@users.noreply.github.com"
            git config --global user.name "ci-bot"
            git remote -v





# ///////////////////////////////////////////////////////////////////////////
# /// CIRCLECI META                                                       ///
# ///////////////////////////////////////////////////////////////////////////


orbs:
  openjdk-install: cloudesire/openjdk-install@1.2.3
  sonarcloud: sonarsource/sonarcloud@1.0.2


executors:
  docker-python3-java11:
    working_directory: ~/projects
    docker:
      - image: circleci/python:3.8.5-node-browsers
        auth:
          username: $DOCKER_USER
          password: $DOCKER_HUB_PASSWORD

  docker-py3-java11-postgres:
    description: |
      This executor consists of 3 (THREE) docker images. The first one - the base image -
      is where all commands are executed. The other two imags are service containers w/
      PostgreSQL DBs, one for EHRbase, one for FHIRbridge.
      - EHRbase DB is accessible via localhost:5432
    working_directory: ~/projects
    docker:
      - image: circleci/python:3.8.5-node-browsers
        auth:
          username: $DOCKER_USER
          password: $DOCKER_HUB_PASSWORD
      - image: ehrbase/ehrbase-postgres:11.10
        name: ehrbase-postgres
        auth:
          username: $DOCKER_USER
          password: $DOCKER_HUB_PASSWORD
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
      - image: ehrbase/ehrbase:0.18.2
        name: ehrbase
        auth:
          username: $DOCKER_USER
          password: $DOCKER_HUB_PASSWORD
        environment:
          DB_URL: jdbc:postgresql://ehrbase-postgres:5432/ehrbase
          DB_USER: ehrbase
          DB_PASS: ehrbase
          SECURITY_AUTHTYPE: BASIC
          SECURITY_AUTHUSER: myuser
          SECURITY_AUTHPASSWORD: myPassword432
          SERVER_DISABLESTRICTVALIDATION: 'true'
      - image: minio/minio
        environment:
          MINIO_ROOT_USER: minio
          MINIO_ROOT_PASSWORD: minio123456
        command: server /data --console-address ":9001"
    # resource_class: large
